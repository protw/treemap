created: 20200628075027994
modified: 20200712152248462
tags: soft tool
title: Обробка зображень з командного рядка

Ті, хто вміє користуватись застосунками з командного рядка, можуть використовувати набір скриптів //Python// для обробки та завантаження зображень. Для цього у //github//-сховищі [[Mapillary Tools|https://github.com/mapillary/mapillary_tools/]] можна знайти те, що потрібно для завантаження великі обсягів, завантаження відео, додавання GPS-міток до зображень, включно з інструкцією користувача [[readme|https://github.com/mapillary/mapillary_tools/blob/master/README.md]], що детально пояснює, як налаштувати та використовувати зазначені інструменти.

<<alert-warning "Примітка. З метою забезпечення швидкодії та високої ефективності послуги, встановлена верхня межа розміру зображення у 100 Мп. Якщо зображення перевищуює цей розмір, потрібно зменшити його розмір перед завантаженням, інакше воно не буде оброблене.">>

!! ПОЧАТОК

За будь-якого методу завантаження, у тому числі для інструментів командного рядка, потрібно мати обліковий запис Mapillary. Інструмент треба встановити на десктоп комп'ютері. Для цього є версії під операційні системи Windows, macOS та Linux.

Під час першого використання інструменту вимагається автентифікація користувача: потрібно ввести дані облікового запису (ім’я користувача та пароль).

<<alert-info "Примітка. Якщо користувач підписався на Mapillary з використанням іншого сервісу аутентифікації (Facebook, OpenStreetMap, Google+ або ArcGIS), то отримати пароль Mapillary можна, подавши запит на скидання пароля е-поштою через налаштування у персональному профілі або обрати посилання 'Забули пароль?' на екрані входу до Mapillary.">>

!! ОБРОБКА ТА ЗАВАНТАЖЕННЯ ЗОБРАЖЕНЬ

Використання інструментів просте: запустити <<mono mapillary_tools>> у командному рядку і вказати мінімум необхідних аргументів: шлях до папки зображень та ім’я користувача облікового запису. Додаткові параметри детально описані у згаданому вище [[readme|https://github.com/mapillary/mapillary_tools/blob/master/README.md]].

Загальний функціонал інструменту включає таке:

* Завантажувати зображення від імені організації замість окремого користувача.
* Помічати зображення гео-мітками з окремого файлу GPX (та визначати зміщення часу, якщо годинники камери і GNSS не синхронізувалися).
* Отримати і помічати напрямок зображення (кут компаса) на основі широти та довготи попередніх / наступних зображень у послідовності. Це дуже корисна утиліта, якщо компас відсутній або ви не довіряєте його показам.
* Організовувати зображення у послідовності.
* Позначити дублікати (коли камера перестала рухатися, наприклад, під час очікування на світлофорі).
* Формувати зображення з відеофайлу із зазначенням джерело для інформації про GPS.
* Додавати час зйомки зображення або GPS-мітки із CSV-файлу.
* Обробляти копії оригінального зображення (замість редагування оригіналів).
* Є можливості з інтерполяції часових міток або GPS-міток зображень, а також вивантаження зображень на локальний комп'ютер з дотриманням заданих умов.

!! ВСТАНОВЛЕННЯ

Виконайте наступні команди для встановлення <<mono mapillary_tools>>:

```
> pip install git+https://github.com/mapillary/Piexif
> pip install --upgrade git+https://github.com/mapillary/mapillary_tools
```

Ви самостійно розберетесь зі встановленням <<mono python>> і <<mono pip>> - благо в Мережі матеріалу на цю тему не бракує.

Хоча тут ви можете стикнутися з певною проблемою. Коли я почав запускати з командного рядка <<mono python>>, то отримав попередження, що його версія 2.7 вже більше не підтримується і потрібно перейти на версію 3 і вище. Це я власне і зробив. Але після відповідного оновлення <<mono python>> і <<mono pip>> я натрапив у іншу халепу: установник <<mono mapillary_tools>> повідомив мене, що працює з версіями <<mono python>> від 2.7, але строго менше 3.0. Це глухий кут.

Прийшлося скористатися безпосереднім завантаженням з //git//-сховища [[Windows Package Installation|https://github.com/mapillary/mapillary_tools/#windows-package-installation]], де розміщене пряме посилання на скомпільований бінарний файл <<mono mapillary_tools>>:

* https://tools.mapillary.com/binary/win/mapillary_tools.exe

<<alert-warning "Після скачування додайте у змінну ОС <$macrocall $name=mono src=PATH/> (принаймні це потрібно зробити у Windows) файловий шлях до фолдера розміщення <$macrocall $name=mono src=mapillary_tools/>. ">>

!! ПРИКЛАДИ РОБОТИ ІЗ ЗОБРАЖЕННЯМИ

Запозичено [[звідси|https://help.openstreetmap.org/questions/56215/how-to-adjust-compass-angle-exif-tag-on-photos-to-follow-a-gpx-track]].

!!! Обробка зображень

У разі відсутності або низької точності компасу можна скористатись розрахунковими значеннями напряму руху на базі інтерполяції напряму руху по координатах суміжних точок в послідовності знімків. Для додавання GPS інформації до EXIF-тегів ​​ваших знімків виконайте таку команду:

```
> mapillary_tools process --verbose --advanced --rerun --user_name mapillary_user --interpolate_directions --overwrite_EXIF_gps_tag --overwrite_EXIF_direction_tag --duplicate_angle 360 --offset_time 1 --import_path "~/media/cam/" --geotag_source "gpx" --geotag_source_path "~/gpx/today.gpx"
```

Тут незайвими будуть деякі пояснення:

* Замініть <<mono mapillary_user>> своїм ім’ям користувача, з яким ви зареєструвались у Mapillary;
* Замініть <<mono ~/media/cam/>> та <<mono ~/gpx/today.gpx>> фолдером своїх знімків та і шляхом до свого GPX-файлу;
* <<mono --interpolate_directions>> повідомляє йому інтерполювати напрямок фотографії на основі треку GPX;
* <<mono "--duplicate_angle 360">> підказує ігнорувати кут під час пошуку дублікатів, usefule, оскільки без підтримки GPS ваша камера не встановить значущий кут;
* <<mono "--offset_time 1">> визначає зміщення, яке потрібно додати до часових позначок GPX для синхронізації з часовою міткою фотографії з годинника камери

Щоб побачити всі параметри та їхній опис запустіть 

```
> mapillary_tools process --advanced -h
```

!!! Завантаження

Щоб завантажити знімки, виконайте таку команду:

```
> mapillary_tools upload --verbose --advanced --skip_subfolders --number_threads 10 --max_attempts 10 --import_path "~/media/cam/"
```