created: 20200921193414896
modified: 20200923171916591
tags: concept soft
title: Розберемось із SfM

Обчислювальна техніка [[SfM - Structure from Motion (структура із руху)|https://uk.wikipedia.org/wiki/Структура_із_руху]] -- процес оцінювання тривимірної структури об'єкта (сцени) через аналіз послідовності його двовимірних зображень, знятих з різних ракурсів. Саме завдяки спроможності визначення просторових координат //ознак// або //ключових точок// (//features//) одночасно з коригуванням (уточненням) положення і напряму знімків (//pose//) ця техніка цікава також в контексті проєкту TREEMAP. 

У зв'язку з використанням панорамних зображень серед різноманіття програмних реалізацій SfM для цілей проєкту був обраний пакет [[OpenSfM|https://github.com/mapillary/OpenSfM]], що власне підтримує панорамні зображення.

Нижче приведений приклад 3D-реконструкції (офісної будівлі в Києві) з восьми панорамних знімків:

{{img/24-sfm-3d-reconstruction.sketchfab}}

Спробуємо дещо розібратись з технікою //OpenSfM// і як її можна пристосувати до вирішення завдань проєкту.

[[3D-реконструкція відбувається у декілька кроків|https://www.opensfm.org/docs/using.html#reconstruction-commands]], починаючи з виявлення //ознак//, також включає встановлення збігів ознак між різними зображеннями, SFM реконструкцію та щільне виявлення ознак (//dense matching//). //OpenSfM// виконує ці дії, використовуючи різні команди, які зберігають результати у файлах для використання іншими командами. Для запуску цих команд використовується одна програма <<mono bin/opensfm>>. Перший аргумент програми - це команда для запуску, а другий - набір даних (//dataset//), на якому запускаються команди.

Для ознайомлення з типовим конвеєром //OpenSfM// розглянемо  базовий скрипт <<mono bin/opensfm_run_all>>, що включає такі основні команди в їхній хронологічній послідовності:

|!Команда|!Призначення|!Розміщення результату|
|^<<mono extract_metadata>> |^Зчитує метадані зображень |^Фолдер <<mono exif>> і файл <<mono camera_models.json>> |
|^<<mono detect_features>> |^Виявляє ознаки, їхні 2D-координати, колір і розмір  |^Фолдер <<mono feature>> |
|^<<mono match_features>> |^Виявляє збіги ознак з різних зображень |^Фолдер <<mono matches>> |
|^<<mono create_tracks>> |^Пов'язує збіги ознак з різних зображень у трек ознаки |^Файл <<mono tracks.csv>> |
|^<<mono reconstruct>> |^Знаходить тривимірне положення треків (structure) разом із положенням камер (//motion//) |^Файл <<mono reconstruction.json>> |
|^<<mono mesh>> |^Обчислює грубу трикутну сітку сцени для кожного зображення |^Файл <<mono reconstruction.meshed.json>> |
|^<<mono undistort>> |^Створює неспотворену версію реконструкції, треків та зображень для обчислення карт глибини |^ |
|^<<mono compute_depthmaps>> |^Обчислює щільну хмару точок сцени шляхом обчислення та злиття карт глибини |^Глибинні карти у фолдері <<mono depthmaps>>, об'єднана хмара точок у файлі <<mono undistorted/depthmaps/merged.ply>> |

!! ''ІДЕЯ ПРИСТОСУВАННЯ ДО ВИРІШЕННЯ ЗАВДАНЬ ПРОЄКТУ''

Виявлення ознак алгоритмом <<mono detect_features>> не спрямовано на пошук конкретного типу об'єктів, а скоріше для виявлення будь-яких доступних оптичному зору ознак (ключових точок) на 2D-зображення. Такими точками, як правило, є невеликі фрагменти зображення з яскраво виділеними різнонаправленими градієнтами, які залишаються інваріантними до лінійних перетворень, як-то - обертання, переміщення, масштабування. У першу чергу, це кути поверхонь. Згодом після перевірки збігів і відсіювання залишається значно менша кількість ознак, для яких під час 3D-реконструкції визначається їхнє 3D розташування.

Процедура виявлення ознак в термінах вимог //SfM// не вирішує питання пошуку таких складних об'єктів, як, скажімо, дерева. Тому на цьому етапі розвитку проєкту ці точки отримуватимуться із залученням людини. Наприклад, це може бути середина стовбура дерева у площині поверхні землі (газону). Таким чином, замість команди <<mono detect_features>> кожний знімок вимагатиме ручного відмічання декількох десятків таких ознак.

Наступне питання, у якому пункті конвеєра //OpenSfM// можна ввести отримані вручну точки? На сьогодні це видається можливим шляхом підстановки власної таблиці <<mono tracks.csv>> замість згенерованої командою <<mono create_tracks>>.

!!! ''Таблиця <<mono tracks.csv>>''

Структура таблиці <<mono tracks.csv>> така:

|!Стовпчик|!Призначення|
|^<<mono image>> |^Назва файла зображення |
|^<<mono track_id>> |^Індекс послідовності відображення конкретної 3D-просторової точки на окремих 2D-зображеннях (знімках) |
|^<<mono feature_id>> |^Індекс відображення цієї точки на поточному 2D-зображенні (знімку) (індексація всіх ознак в межах 1 знімку) |
|^<<mono x>> |^Нормалізована координата <<mono x>> (по горизонталі зліва праворуч) цієї точки на поточному 2D-зображенні (знімку) |
|^<<mono y>> |^Нормалізована координата <<mono y>> (по вертикалі згори вниз) цієї точки на поточному 2D-зображенні (знімку) |
|^<<mono observation>> |^Поки що знак ? - треба уточнювати |
|^<<mono r>> |^Червона складова кольору цієї точки на знімку |
|^<<mono g>> |^Зелена складова кольору цієї точки на знімку |
|^<<mono b>> |^Блакитна складова кольору цієї точки на знімку |

Насправді формат таблиці не //CSV//, а //TSV// - тобто значення в рядку розділені табуляціями, а не комами. Для наочності перших два рядки таблиці мають такий вигляд:

```
OPENSFM_TRACKS_VERSION_v1
03.jpg	1730	4451	0.205076	0.0178364	0.00832819	36	26	23
```

Також доречно врахувати як нормалізацію (перехід від пікселів) координат зображення так і зворотну процедури: <<mono normalized_image_coordinates>><<ref-link "https://github.com/mapillary/OpenSfM/blob/master/opensfm/features.py#L57">> і <<mono denormalized_image_coordinates>><<ref-link "https://github.com/mapillary/OpenSfM/blob/master/opensfm/features.py#L65">>.

<<alert-warning "Опис процедур і структур, доданий нижче, хоча і ґрунтується на здоровому глузді на сьогодні поки що є припущенням і потребує дослідження та перевірки!">>

!!! ''Проведення розрахунків''

Розрахунки відбуваються за такою схемою:

# Відмічаємо всі об'єкти (дерева) на кожному знімку в серії, присвоюємо індекс <<mono feature_id>> отриманим точкам в межах знімку.
# Зв'язуємо 3D-просторово ідентичні точки на знімках у окремі послідовності з присвоєнням кожній такій послідовності індексу <<mono track_id>>.
# Генеруємо таблицю <<mono tracks.csv>> і розміщаємо її у корені аналізованого набору даних.
# Запускаємо послідовно дві команди <<mono extract_metadata>> і <<mono reconstruct>>.
# Аналізуємо отриманий результат з файлу <<mono reconstruction.json>>.

!!! ''Аналіз результату реконструкції''

Результат 3D-реконструкції розміщений у файлі <<mono reconstruction.json>> у корені аналізованого набору даних<<ref-link "https://opensfm.readthedocs.io/en/latest/dataset.html#reconstruction-file-format">>.

Структура верхнього рівня <<mono reconstruction.json>> така:

|!Елемент структури|!Призначення|
|^<<mono cameras>> |^Параметри камер, якими проводилась зйомка серії. Тобто допускається до аналізу знімки різних камер. |
|^<<mono shots>> |^Знімки. |
|^<<mono points>> |^Окремі 3D-просторово ідентичні точки. Кожній точці тут відповідає <<mono track_id>>. |
|^<<mono reference_lla>> |^Місцева точка відліку географічних координат. |

; Знімки
: Структура верхнього рівня <<mono shots>> включає перелік імен файлів знімків (без файлового шляху -- лише ім'я, точка, розширення). Глибше в структурі кожного знімку на цікавитиме принаймні три структурних елементи, кожний з яких містить вектор з трьох дійсних чисел: <div>

* <<mono rotation>> - поправка напряму погляду камери в знімку в кутах Ейлера в радіанах;
* <<mono translation>> - переміщення камери відносно початкового кадру <<ref-link "https://www.opensfm.org/docs/_modules/opensfm/types.html#Pose">>, схоже в метрах;
* <<mono gps_position>> - GPS координати у фреймі реконструкції <<ref-link "https://opensfm.readthedocs.io/en/latest/dataset.html#reconstruction-file-format">>, схоже, що відносно <<mono reference_lla>>, схоже в метрах.

<<mono reference_lla>>

</div>

; Ознаки (треки точок)
: Структура верхнього рівня <<mono points>> включає перелік індексів треків <<mono track_id>>. Кожен трек представляє 3D-точку (ознака відміченого нами об'єкту) і включає дві трійки чисел <<mono color>> і <<mono coordinates>>:<div>

* <<mono color>> то є цілі числа від 0 до 255, що відображають RGB колір точки;
* <<mono coordinates>> то є дійсні числа координат точки в метрах відносно місцевої точки відліку географічних координат координат <<mono reference_lla>>.

</div>

; Місцева система координат
: Структура <<mono reference_lla>> вочевидь включає всього три скалярних елементи: <<mono latitude>>, <<mono longitude>>, <<mono altitude>> в градусах, градусах і метрах відповідно.
